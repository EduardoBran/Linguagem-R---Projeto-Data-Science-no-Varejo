summary(dados)
# lendo dados (empenho em diárias em municípios gaúchos e PIB do munícipio)
dados = read.csv("dados.csv", sep = ";", na.strings = "", stringsAsFactors = T)
dados
summary(dados)
dados
summary(dados)
# lendo dados (empenho em diárias em municípios gaúchos e PIB do munícipio)
dados = read.csv("dados.csv", sep = ";", na.strings = "", stringsAsFactors = T)
dados
summary(dados)
summary(dados$CODIGO)
summary(dados$MUNICIPIO)
summary(dados$PIB)
summary(dados$VALOREMPENHO)
summary(dados$CODIGO)
summary(dados$MUNICIPIO)
summary(dados$PIB)
summary(dados$VALOREMPENHO)
dados
summary(dados$MUNICIPIO)
summary(dados$CODIGO)
# Valores faltantes (NAs)
dados[!complete.cases(dados),] # exibe todas as linhas com NAs
library(lattice)
bwplot(dados)
bwplot(dados$CODIGO)
dados
bwplot(dados$PIB)
bwplot(dados$PIB, main="PIB")
bwplot(dados$VALOREMPENHO, main="VALOR DE EMEPENHO")
histogram(dados$PIB, main="PIB", xlab="Volume", aspect=1, nint=20, type='percent')
amostra
# 150 amostras, de 0 e 1, com reposição, problemas equivalentes
amostra = sample(c(0, 1)), 150, replace = TRUE, prob=c(0.5, 0.5))
amostra
# 150 amostras, de 0 e 1, com reposição, problemas equivalentes
amostra = sample(c(0, 1), 150, replace = TRUE, prob=c(0.5, 0.5))
amostra
summary(as.factor(amostra))
amostra
summary(as.factor(amostra))
summary(as.factor(amostra))
# 150 amostras, de 0 e 1, com reposição, probabilidade equivalentes
amostra = sample(c(0, 1), 150, replace = TRUE, prob=c(0.5, 0.5))
amostra
summary(as.factor(amostra))
```{r}
# 150 amostras, de 0 e 1, com reposição, mais chances para zero
amostra = sample(c(0, 1), 150, replace = TRUE, prob=c(0.7, 0.3))
amostra
summary(as.factor(amostra))
# 150 amostras, de 0 e 1, com reposição, probabilidade equivalentes
amostra = sample(c(0, 1), 150, replace = TRUE, prob=c(0.5, 0.5))
amostra
summary(as.factor(amostra))
# 150 amostras, de 0 e 1, com reposição, mais chances para zero
amostra = sample(c(0, 1), 150, replace = TRUE, prob=c(0.7, 0.3))
amostra
summary(as.factor(amostra))
amostra
# 150 amostras, de 0 e 1, com reposição, mais chances para zero
amostra = sample(c(0, 1), 150, replace = FALSE)
amostra
amostra
amostra
amostra2
# 150 amostras, de 0 e 1, sem reposição, mais chances para zero
amostra2 = sample(c(0:1000), 150, replace = FALSE)
amostra2
# 150 amostras, de 0 a 1000, sem reposição, mais chances para zero
# nao repete numeros
amostra2 = sample(c(0:1000), 150, replace = FALSE)
amostra2
# Gerando amostra de conjunto de dados Iris
# Gerando 30% dos dados de iris
amostra = sample(c(0, 1), 150, replace = TRUE, prob=c(0.7, 0.3))
summary(as.factor(amostra))
# Gerando amostra de conjunto de dados Iris
# Gerando 30% dos dados de iris
amostra = sample(c(0, 1), 150, replace = TRUE, prob=c(0.7, 0.3))
summary(as.factor(amostra))
amostrairis
# Gerando a amostra
amostra_iris = iris[amostra==1,]
amostrairis
amostra_iris
dim(amostra_iris)
# Gerando a amostra
amostra_iris = iris[amostra==1,]
amostra_iris
dim(amostra_iris)
# Repetir o experimento (vem os mesmos valores acima)
set.seed(2345)
sample(c(1000), 1)
set.seed(2345)
set.seed(2345)
sample(c(1000), 1)
# Repetindo
set.seed(2345)
sample(c(1000), 1)
install.packages("TeachingSampling")
# install.packages("TeachingSampling")
library("TeachingSampling")
install.packages("Rtools")
amostra = S.SY(150, 10)
amostra
dim(amostra)
amostra
amostra
# gerando amostra sistematica até 150 em 10 grupos
amostra = S.SY(150, 10)
amostra
amostra_iris = iris[amostra,]
amostra_iris = iris[amostra,]
amostra_iris = iris[amostra,]
amostra_iris
dim(amostra_iris)
install.packages("sampling")
library("sampling")
proporcao = 25
amostra_iris = strata(data=iris, stratanames=c('Species'), size=c(rep(proporcao, 3)), method='srswor')
# Exibindo resultado através de um sumario
summary(amostra_iris)
infert
summary(infert)
# outro exemplo usando conjunto de dados infert (características de infertilidade)
infert
summary(infert)
amostra_infert = strata(data = infert, stratanames = c("education"), size = c(5,48,47), method = 'srswor)
# resultado
amostra_infert
summary(amostra_infert)
amostra_infert = strata(data = infert, stratanames = c("education"), size = c(5,48,47), method = 'srswor)
# resultado
amostra_infert
summary(amostra_infert)
amostra_infert
amostra_infert = strata(data = infert, stratanames = c("education"), size = c(5,48,47), method = 'srswor)
amostra_infert = strata(data = infert, stratanames = c("education"), size = c(5,48,47), method = 'srswor')
# resultado
amostra_infert
summary(amostra_infert)
# Dados dos jogadores
jogadores = c(40000, 18000, 12000, 250000, 30000, 140000, 300000, 40000, 800000)
jogadores
mean(jogadores)
median(jogadores)
# Quartis
quartis = quantile(jogadores)
quartis
quartis[4]
sd(jogadores)
summary(jogadores)
options(warn=-1)
install.packages("semTools")
library(semTools)
z = rep(0, 500)
# Gera as amostras
for (i in 1:500) {
m = mvrnonnorm(1000, c(1, 2), matrix(c(10, 2, 2, 5), 2, 2), skewness = c(5, 2), kurtosis = c(3, 3))
# grava a média da amostra
z[i] = mean(m)
#imprime as 3 primeiras
if (i < 4) {
hist(m, breaks=50, main=paste0("Histrograma", i))
}
}
m
# m Gera as amostras/dados enviesados(por isso o skewness, kurtosis)
for (i in 1:500) {
m = mvrnonnorm(1000, c(1, 2), matrix(c(10, 2, 2, 5), 2, 2), skewness = c(5, 2), kurtosis = c(3, 3))
# m
# grava a média da amostra
z[i] = mean(m)
#imprime as 3 primeiras
if (i < 4) {
hist(m, breaks=50, main=paste0("Histrograma ", i))
}
}
hist(z)
set.seed(123)
x = rnorm(1000)
qqnorm(x)
# Gráfico QQ (rodar com ctrl shif enter)
qqnorm(x)
#linha
qqline(x)
#linha
qqline(x)
#linha
qqline(x)
qqnorm(x)
# Gráfico QQ (rodar com ctrl shif enter)
qqnorm(x)
#linha
qqline(x)
shapiro.test(x)
hist(x, main="")
hist(x)
# Histograma com linha de densidade (rodar com ctrl shif enter)
hist(x, main='')
par(new=TrUE)
# Histograma com linha de densidade (rodar com ctrl shif enter)
hist(x, main='')
par(new=TRUE)
plot(density(x), ylab="", xlab="", axes=F, lwd=2.5)
# Exemplo com Dados não normalmente distribuidos
install.packages("semTools")
library(semTools)
install.packages("semTools")
library(semTools)
# Exemplo com Dados não normalmente distribuidos
# install.packages("semTools")
library(semTools)
m = mvrnonnorm(1000, c(1, 2), matrix(c(10, 2, 2, 5), 2, 2), skewness=c(5, 2), kurtosis= c(3,3))
qqnorm(m)
qqline(m)
shapiro.test(m)
shapiro.test(m)
hist(m, main="")
# Histograma (rodar com ctrl shif enter)
hist(m, main="")
par(new=TRUE)
plot(density(x), ylab="", xlab="", axes=F, lwd=2.5)
mean(x)
mean(x)
# Amostra Pequena
# Espera-se uma média de 3,5
# Gerando a média
x = sample(1:6, 6, replace = T)
mean(x)
# Amostra Pequena
# Espera-se uma média de 3,5
# Gerando a média
x = sample(1:6, 6, replace = T)
mean(x)
# Amostra grande
x = sample(1:6, 10000, replace = T)
mean(x)
# Amostra grande
x = sample(1:6, 10000, replace = T)
mean(x)
# Amostra grande
x = sample(1:6, 10000, replace = T)
mean(x)
plot(cars)
plot(cars)
getwd()
# Multiplicação
5 * 5
6 / 2
# Potência
3^2
3**2
# Módulo
16 %% 3
x = 7
y = 5
# Operadores
x > 8
x < 8
x <= 8
x >= 8
x == 8
x != 8
# And
(x==8) & (x==6)
(x==7) & (x==5)
(x==8) & (x==5)
# Or
(x==8) | (x>5)
(x==8) & (x>=5)
# Not
x > 8
print(!x > 8)
getwd()
var1
var1 = 100
var1
var1
var1
var1
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
vari
# criando variáveis
var1
# criando variáveis
var1
mode(var1)
var1 = 100
var1
mode(var1)
help("mode")
sqrt(var1)
help("sqrt")
var1 = var2
var2 = var1
var2
mode(var2)
typeof(var2)
help("typeof")
var2 = var1
var2
mode(var2)
typeof(var2)
help("typeof")
var3 = c("primeiro", "segundo", "terceiro")
var3
mode(var3)
var4 = function(x) {x+3}
var4
mode(var4)
var5 = as.character(var1)
var5
mode(var5)
x <- c(1,2,3)
x
x1 = c(1,2,3)
x1
c(1,2,3) -> y
y
assign("z", c(6.3,4,-2)) # função para atribuir, atribuimos o veotr para "z"
z
# verificando o valor em uma posição específica
x[1]
x[1]
# verificar objetos
ls()
# verificando o valor em uma posição específica
z[1]
# verificar objetos
ls()
objects()
ls()
objects()
# remover objetos (variaveis)
rm(x)
x
nomes <- character()
idades <- numeric()
itens <- numeric()
codigos <- integer()
x <- 5:7
y <- 8:10
x
plot(x, y)
?plot
?plot
help(plot)
altura <- c(145, 167, 176, 123, 150)
largura <- c(51, 63, 64, 40, 55)
plot(altura, largura)
?lynx
?lynx
View(lynx)
lynx
data(lynx)
View(lynx)
plot(lynx)
head(lynx)
View(head(lynx))
View(iris)
?lynx
head(lynx)
plot(lynx)
str(lynx)
names(lynx)
colnames(lynx)
plot(iris)
plot(lynx)
View(lynx)
?lynx # dataframe "lynx" contém duas colunas: "Year" (ano) e "trappings" (armadilhas), com 114 observações para cada variável
plot(lynx)
plot(lynx, ylab = 'Plots com Dataframes', xlab = '')
plot(lynx)
plot(lynx, ylab = 'Plots com Dataframes', xlab = '')
plot(lynx, ylab = 'Plots com Dataframes', xlab = 'Observações')
plot(lynx, main = 'Plots com Dataframes')
plot(lynx, main = 'Plots com Dataframes', col = 'red')
plot(lynx, main = 'Plots com Dataframes', col = 'red', col.main = 52,  cex.main = 1.5)
plot(lynx, main = 'Plots com Dataframes', col = 'red', col.main = 62,  cex.main = 1.5)
plot(lynx, main = 'Plots com Dataframes', col = 'red', col.main = 52,  cex.main = 2.5)
plot(lynx, main = 'Plots com Dataframes', col = 'red', col.main = 52,  cex.main = 1.5) # muda a cor e o tamanho do titulo
library(datasets)
hist(warpbreaks$breaks)
View(airquality)
View(airquality)
transform(airquality, Month = factor(Month))
View(airquality)
View(transform(airquality, Month = factor(Month)))
transform(airquality, Month = factor(Month))
boxplot(Ozone ~ Month, airquality, xlab = 'Month', ylab = 'Ozone (ppb)')
airquality
transform(airquality, Month = factor(Month))
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
# caso queira fazer ajustes em dos parametros, temos a funcao par()
?par
setwd("C:/Users/Julia/Desktop/CienciaDeDados/1.Big-Data-Analytics-com-R-e-Microsoft-Azure-Machine-Learning/5.Manipulacao-de-Arquivos-TXT-CSV-e-Planilhas-Excel-em-R")
getwd()
# Carrega o pacote
library("XML")
# Carrega o pacote necessssário para manipular conteúdo XML
library("methods")
# Carrega o arquivo
arquivo_xml <- xmlParse(file = 'funcionarios.xml')
arquivo_xml
# Extrai o nó raiz
rootnode <- xmlRoot(result)
# Extrai a raiz do arquivo
rootnode <- xmlRoot(arquivo_xml)
rootnode
rootnode[1]
rootnode[0]
rootnode[2]
rootnode[1]
# Número de nós no arquivo
rootsize <- xmlSize(rootnode)
rootsize
rootnode
arquivo_xml
# Extrai o primeiro elemento do primeiro nó raiz do arquivo
rootnode[1][1]
# Extrai o primeiro elemento do primeiro nó raiz do arquivo
rootnode[[1][1]]
# Extrai o primeiro elemento do primeiro nó raiz do arquivo
rootnode[[1][1]]
# Extrai o primeiro elemento do primeiro nó raiz do arquivo
rootnode[[1]][[1]]
# Extrai o quinto elemento do primeiro nó raiz do arquivo (neste exemplo é o <DEPT>)
rootnode[[1]][[5]]
# Extrai o segundo elemento do terceiro nó raiz do arquivo (neste exemplo é o <NAME>)
rootnode[[2]][[3]]
# Extrai o quinto elemento do primeiro nó raiz do arquivo (neste exemplo é o <DEPT>)
rootnode[[1]][[5]]
# Extrai o segundo elemento do terceiro nó raiz do arquivo (neste exemplo é o <NAME>)
rootnode[[2]][[3]]
# exibe tudo dentro de <RECORDS>
rootnode
# Extrai o quinto elemento do primeiro nó raiz do arquivo (neste exemplo é o <DEPT>)
rootnode[[1]][[5]]
rootnode[2]
# Extrai o segundo elemento do terceiro nó raiz do arquivo (neste exemplo é o <SALARY>)
rootnode[[2]][[3]]
xmldataframe <- xmlToDataFrame("funcionarios.xml")
xmldataframe
View(xmldataframe)
write.csv(xmldataframe, "funcionariosCSV2.csv", row.names = FALSE, sep = ",")
gc()
setwd("C:/Users/Julia/Desktop/CienciaDeDados/1.Big-Data-Analytics-com-R-e-Microsoft-Azure-Machine-Learning/5.Projeto-Data-Science-no-Varejo-com-Market-Basket-Analysis")
getwd()
install.packages('arules')
install.packages('arulesViz')
install.packages('htmlwidgets')
install.packages('htmlwidgets')
install.packages('writexl')
library(dplyr)         # pacote para processar dados
library(arules)        # pacote com algoritimo para Market Basket Analysis
library(arulesViz)     # pacote para visualização das regras de associações criados com pacote acima
library(htmlwidgets)   # pacote para gerar os graficos do arulesViz
library(writexl)       # pacote para gerar e gravar os arquivos em Excel
options(warn=-1)       # filtra tipos de warning (para não poluir o console)
setwd("C:/Users/Julia/Desktop/CienciaDeDados/1.Big-Data-Analytics-com-R-e-Microsoft-Azure-Machine-Learning/5.Projeto-Data-Science-no-Varejo-com-Market-Basket-Analysis")
getwd()
