# Exemplo com Dados não normalmente distribuidos
install.packages("semTools")
library(semTools)
install.packages("semTools")
library(semTools)
# Exemplo com Dados não normalmente distribuidos
# install.packages("semTools")
library(semTools)
m = mvrnonnorm(1000, c(1, 2), matrix(c(10, 2, 2, 5), 2, 2), skewness=c(5, 2), kurtosis= c(3,3))
qqnorm(m)
qqline(m)
shapiro.test(m)
shapiro.test(m)
hist(m, main="")
# Histograma (rodar com ctrl shif enter)
hist(m, main="")
par(new=TRUE)
plot(density(x), ylab="", xlab="", axes=F, lwd=2.5)
mean(x)
mean(x)
# Amostra Pequena
# Espera-se uma média de 3,5
# Gerando a média
x = sample(1:6, 6, replace = T)
mean(x)
# Amostra Pequena
# Espera-se uma média de 3,5
# Gerando a média
x = sample(1:6, 6, replace = T)
mean(x)
# Amostra grande
x = sample(1:6, 10000, replace = T)
mean(x)
# Amostra grande
x = sample(1:6, 10000, replace = T)
mean(x)
# Amostra grande
x = sample(1:6, 10000, replace = T)
mean(x)
plot(cars)
plot(cars)
getwd()
# Multiplicação
5 * 5
6 / 2
# Potência
3^2
3**2
# Módulo
16 %% 3
x = 7
y = 5
# Operadores
x > 8
x < 8
x <= 8
x >= 8
x == 8
x != 8
# And
(x==8) & (x==6)
(x==7) & (x==5)
(x==8) & (x==5)
# Or
(x==8) | (x>5)
(x==8) & (x>=5)
# Not
x > 8
print(!x > 8)
getwd()
var1
var1 = 100
var1
var1
var1
var1
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
vari
# criando variáveis
var1
# criando variáveis
var1
mode(var1)
var1 = 100
var1
mode(var1)
help("mode")
sqrt(var1)
help("sqrt")
var1 = var2
var2 = var1
var2
mode(var2)
typeof(var2)
help("typeof")
var2 = var1
var2
mode(var2)
typeof(var2)
help("typeof")
var3 = c("primeiro", "segundo", "terceiro")
var3
mode(var3)
var4 = function(x) {x+3}
var4
mode(var4)
var5 = as.character(var1)
var5
mode(var5)
x <- c(1,2,3)
x
x1 = c(1,2,3)
x1
c(1,2,3) -> y
y
assign("z", c(6.3,4,-2)) # função para atribuir, atribuimos o veotr para "z"
z
# verificando o valor em uma posição específica
x[1]
x[1]
# verificar objetos
ls()
# verificando o valor em uma posição específica
z[1]
# verificar objetos
ls()
objects()
ls()
objects()
# remover objetos (variaveis)
rm(x)
x
nomes <- character()
idades <- numeric()
itens <- numeric()
codigos <- integer()
x <- 5:7
y <- 8:10
x
plot(x, y)
?plot
?plot
help(plot)
altura <- c(145, 167, 176, 123, 150)
largura <- c(51, 63, 64, 40, 55)
plot(altura, largura)
?lynx
?lynx
View(lynx)
lynx
data(lynx)
View(lynx)
plot(lynx)
head(lynx)
View(head(lynx))
View(iris)
?lynx
head(lynx)
plot(lynx)
str(lynx)
names(lynx)
colnames(lynx)
plot(iris)
plot(lynx)
View(lynx)
?lynx # dataframe "lynx" contém duas colunas: "Year" (ano) e "trappings" (armadilhas), com 114 observações para cada variável
plot(lynx)
plot(lynx, ylab = 'Plots com Dataframes', xlab = '')
plot(lynx)
plot(lynx, ylab = 'Plots com Dataframes', xlab = '')
plot(lynx, ylab = 'Plots com Dataframes', xlab = 'Observações')
plot(lynx, main = 'Plots com Dataframes')
plot(lynx, main = 'Plots com Dataframes', col = 'red')
plot(lynx, main = 'Plots com Dataframes', col = 'red', col.main = 52,  cex.main = 1.5)
plot(lynx, main = 'Plots com Dataframes', col = 'red', col.main = 62,  cex.main = 1.5)
plot(lynx, main = 'Plots com Dataframes', col = 'red', col.main = 52,  cex.main = 2.5)
plot(lynx, main = 'Plots com Dataframes', col = 'red', col.main = 52,  cex.main = 1.5) # muda a cor e o tamanho do titulo
library(datasets)
hist(warpbreaks$breaks)
View(airquality)
View(airquality)
transform(airquality, Month = factor(Month))
View(airquality)
View(transform(airquality, Month = factor(Month)))
transform(airquality, Month = factor(Month))
boxplot(Ozone ~ Month, airquality, xlab = 'Month', ylab = 'Ozone (ppb)')
airquality
transform(airquality, Month = factor(Month))
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
# caso queira fazer ajustes em dos parametros, temos a funcao par()
?par
setwd("C:/Users/Julia/Desktop/CienciaDeDados/1.Big-Data-Analytics-com-R-e-Microsoft-Azure-Machine-Learning/5.Projeto-Data-Science-no-Varejo-com-Market-Basket-Analysis")
getwd()
dados <- read.csv("dataset_bd3.csv")
dados <- read.csv("dataset_bd3.csv")
dim(dados)
summary(dados)
View(dados)
str(dados)
linhas_pares <- seq(2, nrow(dados), 2)      # No caso de linhas_pares, a sequência começa no número 2, que é a segunda linha do data frame, e termina no número de linhas do data frame (nrow(dados)), com incrementos de 2. Isso significa que a variável linhas_pares contém os números das linhas pares do data frame dados.
linhas_impares <- seq(1, nrow(dados), 2)
View(linhas_pares)
df1 <- dados[linhas_pares, ]
df2 <- dados[linhas_impares, ]
View(df1)
View(df2)
dim(df1)
dim(df2)
dim(df1)
df3 <- na.omit(dados)
dim(df3)
View(df3)
# 2ª forma de remover as linhas com valores em branco
dados <- dados2
# 2ª forma de remover as linhas com valores em branco
dados2 <- dados
View(dados2)
# Substituir valores em branco por NA
dados2[dados2 == ""] <- NA
View(dados2)
# Remover linhas com valores faltantes
dados2 <- na.omit(dados)
View(dados2)
# Remover linhas com valores faltantes
dados2 <- na.omit(dados2)
View(dados2)
# 2ª forma de remover as linhas com valores em branco
dados2 <- dados
View(dados2)
# Substituir valores em branco por NA
dados2[dados2 == ""] <- NA
View(dados2)
# Remover linhas com valores faltantes
dados2 <- na.omit(dados2)
View(dados2)
View(dados2)
df3 <- na.omit(dados)
View(dados2)
# 2ª forma de remover as linhas com valores em branco
dados2 <- dados
# verificar quais linhas estão completas (sem valores em branco)
complete_rows <- complete.cases(dados2)
# subconjugar o dataframe para manter apenas as linhas completas
dados2 <- dados2[complete_rows, ]
View(dados2)
# 2ª forma de remover as linhas com valores em branco
dados2 <- dados
# converter todas as células para caracteres e remover espaços em branco
dados2 <- as.data.frame(lapply(dados, as.character), stringsAsFactors = FALSE)
dados2 <- as.data.frame(lapply(dados2, trimws))
# remover linhas com valores em branco em todas as colunas
dados2 <- dados2[rowSums(dados2 != "") > 0, ]
View(dados2)
dim(df1)
dim(dados2)
dados <- read.csv("dataset_bd3.csv")
linhas_pares <- seq(2, nrow(dados), 2)      # No caso de linhas_pares, a sequência começa no número 2, que é a segunda linha do data frame, e termina no número de linhas do data frame (nrow(dados)), com incrementos de 2. Isso significa que a variável linhas_pares contém os números das linhas pares do data frame dados.
linhas_impares <- seq(1, nrow(dados), 2)
df1 <- dados[linhas_pares, ]
df2 <- dados[linhas_impares, ]
View(dados)
any(is.na(df1$Item01) | df1$Item01 == "")
any(is.na(df1$Item02) | df1$Item01 == "")
View(df1)
any(is.na(df1$Item02) | df1$Item02 == "")
sum(is.na(df1$Item02))
any(is.na(df1$Item02) | df1$Item02 == "")
sum(is.na(df1$Item01))
# Verifica se temos valores ausentes representaos por espaço em branco
which(nchar(trimws(df1$Item01))==0)
which(nchar(trimws(df1$Item02))==0)
# 2ª forma de remover as linhas com valores em branco
dados2 <- dados
View(dados2)
# converter todas as células para caracteres e remover espaços em branco
dados2 <- as.data.frame(lapply(dados2, as.character), stringsAsFactors = FALSE)
dados2 <- as.data.frame(lapply(dados2, trimws))
# remover linhas com valores em branco em todas as colunas
dados2 <- dados2[rowSums(dados2 != "") > 0, ]
View(dados2)
# 1ª forma
sum(is.na(df1$Item01))                    # retorna a quantidade de valores iguais a NA na coluna Item01
# 2º forma
any(is.na(df1$Item01) | df1$Item01 == "") # retorna um valor lógico (TRUE ou FALSE) indicando se há pelo menos um valor NA ou em branco (com caracter espaço)
# 1ª forma
sum(is.na(df1$Item01))                    # 0
# 2º forma
any(is.na(df1$Item02) | df1$Item02 == "") # TRUE
# Para de fato conseguirmos detectar valores em branco (caracter espaço)
which(nchar(trimws(df1$Item01))==0)
which(nchar(trimws(df1$Item02))==0)
which(nchar(trimws(df1$Item01))==0)
View(df1)
# 1ª forma
sum(is.na(df1$Item02))                    # 0
which(nchar(trimws(df1$Item02))==0)  # coluna Item02 (retorna)
grepl("^\\s*$", df1$Item01)
grepl("^\\s*$", df1$Item02)
View(df1)
# Número de itens distintos
n_distinct(df1)
library(dplyr)         # pacote para processar dados
library(arules)        # pacote com algoritimo para Market Basket Analysis
library(arulesViz)     # pacote para visualização das regras de associações criados com pacote acima
library(htmlwidgets)   # pacote para gerar os graficos do arulesViz
library(writexl)       # pacote para gerar e gravar os arquivos em Excel
options(warn=-1)       # filtra tipos de warning (para não poluir o console)
# Verificando número de itens distintos
n_distinct(df1)
df1_two <- df1[!grepl("^\\s*$", df1$Item02), ]
View(df1_two)
n_distinct(df1_two)
# 1ª forma
sum(is.na(df1$Item01))                    # retorna a quantidade de valores iguais a NA na coluna Item01
View(df1_two)
pacote <- df1_two
pacote <- df1_two
summary(pacote)
pacote$Item01 <- as.factor(pacote$Item01)
pacote$Item02 <- as.factor(pacote$Item02)
pacote$Item03 <- as.factor(pacote$Item03)
pacote$Item04 <- as.factor(pacote$Item04)
pacote$Item05 <- as.factor(pacote$Item05)
pacote$Item06 <- as.factor(pacote$Item06)
summary(pacote)
str(pacote)
View(df1_two)
View(pacote)
pacote_split <- split(pacote$Item01,
pacote$Item02,
pacote$Item03,
pacote$Item04,
pacote$Item05,
pacote$Item06
)
pacote$Item01 <- as.factor(pacote$Item01)
pacote$Item02 <- as.factor(pacote$Item02)
pacote$Item03 <- as.factor(pacote$Item03)
pacote$Item04 <- as.factor(pacote$Item04)
pacote$Item05 <- as.factor(pacote$Item05)
pacote$Item06 <- as.factor(pacote$Item06)
pacote_split <- split(pacote$Item01,
pacote$Item02,
pacote$Item03,
pacote$Item04,
pacote$Item05,
pacote$Item06
)
pacote_split <- pacote %>%
group_by(Item01, Item02, Item03, Item04, Item05, Item06)
View(pacote_split)
pacote <- df1_two
pacote$Item01 <- as.factor(pacote$Item01)
pacote$Item02 <- as.factor(pacote$Item02)
pacote$Item03 <- as.factor(pacote$Item03)
pacote$Item04 <- as.factor(pacote$Item04)
pacote$Item05 <- as.factor(pacote$Item05)
pacote$Item06 <- as.factor(pacote$Item06)
summary(pacote)
str(pacote)
pacote_split <- split(pacote$Item01,
pacote$Item02,
pacote$Item03,
pacote$Item04,
pacote$Item05,
pacote$Item06)
pacote_split <- split(pacote,
list(pacote$Item01,
pacote$Item02,
pacote$Item03,
pacote$Item04,
pacote$Item05,
pacote$Item06),
drop = TRUE)
View(pacote_split)
View(pacote_split)
str(pacote)
pacote$Item01 <- as.factor(pacote$Item01, levels = unique(pacote$Item01), drop = FALSE)
View(pacote_split)
View(pacote_split)
pacote_split <- split(pacote[, c("Item01", "Item02", "Item03", "Item04", "Item05", "Item06")],
list(pacote$Item01,
pacote$Item02,
pacote$Item03,
pacote$Item04,
pacote$Item05,
pacote$Item06),
drop = TRUE)
View(pacote_split)
pacote_split <- split(pacote[, c("Item01", "Item02", "Item03", "Item04", "Item05", "Item06")],
list(pacote$Item01,
pacote$Item02,
pacote$Item03,
pacote$Item04,
pacote$Item05,
pacote$Item06),
drop = TRUE)
df1_two <- df1[!grepl("^\\s*$", df1$Item02), ]
View(df1_two)
pacote <- df1_two
pacote$Item01 <- as.factor(pacote$Item01)
pacote$Item02 <- as.factor(pacote$Item02)
pacote$Item03 <- as.factor(pacote$Item03)
pacote$Item04 <- as.factor(pacote$Item04)
pacote$Item05 <- as.factor(pacote$Item05)
pacote$Item06 <- as.factor(pacote$Item06)
View(pacote)
str(pacote)
lista_itens <- split(pacote[, c("Item01", "Item02", "Item03", "Item04", "Item05", "Item06")], 1:nrow(pacote))
View(lista_itens)
pacote_split <- split(pacote$Item01,
pacote$Item02,
pacote$Item03,
pacote$Item04,
pacote$Item05,
pacote$Item06)
pacote_split <- split(pacote[,1:6])
pacote_split <- split(pacote[,1:6], f = pacote$Item03)
View(pacote_split)
pacote_split <- split(pacote[,1:6], f = pacote$Item01)
View(pacote_split)
pacote_split <- split(pacote[,1:6], f = pacote$Item02)
View(pacote_split)
# Carrega e explora o dataset
dados <- read.csv("dataset_bd3.csv")
# Uma forma inteligente de resolver o problema no dataset
# Separamos as linhas pares das linhas ímpares
linhas_pares <- seq(2, nrow(dados), 2)
# Separamos os dados e então usaremos o dataset com as linhas pares (linhas de dados válidos)
df1 <- dados[linhas_pares, ]
# Verifica se temos valores ausentes no primeiro item de compra
sum(is.na(df1$Item01))
# Verifica se temos valores ausentes representados por espaço em branco
which(nchar(trimws(df1$Item01))==0)
which(nchar(trimws(df1$Item02))==0)
# Vamos trabalhar somente com os registros onde o item 2 não fos nulo
df1_two <- df1[!grepl("^\\s*$", df1$Item02), ]
pacote <- df1_two
pacote$Item01 <- as.factor(pacote$Item01)
pacote$Item02 <- as.factor(pacote$Item02)
pacote$Item03 <- as.factor(pacote$Item03)
pacote$Item04 <- as.factor(pacote$Item04)
pacote$Item05 <- as.factor(pacote$Item05)
pacote$Item06 <- as.factor(pacote$Item06)
pacote_split <- split(pacote$Item01,
pacote$Item02,
pacote$Item03,
pacote$Item04,
pacote$Item05,
pacote$Item06)
gc()
dados <- read.csv("dataset_bd3.csv")
linhas_pares <- seq(2, nrow(dados), 2)      # No caso de linhas_pares, a sequência começa no número 2, que é a segunda linha do data frame, e termina no número de linhas do data frame (nrow(dados)), com incrementos de 2. Isso significa que a variável linhas_pares contém os números das linhas pares do data frame dados.
df1 <- dados[linhas_pares, ]
df1_two <- df1[!grepl("^\\s*$", df1$Item02), ]
pacote <- df1_two
pacote$Item01 <- as.factor(pacote$Item01)
pacote$Item02 <- as.factor(pacote$Item02)
pacote$Item03 <- as.factor(pacote$Item03)
pacote$Item04 <- as.factor(pacote$Item04)
pacote$Item05 <- as.factor(pacote$Item05)
pacote$Item06 <- as.factor(pacote$Item06)
pacote_split <- split(pacote[,1:6], f = pacote$Item02) # aqui teve que ser feita uma alteração no código. Foi usando o "f =
View(pacote_split)
